package Games.Pong;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

class FlappyTom extends JPanel implements ActionListener, KeyListener {
    int boardWidth=360;
    int boardHeight=640;

    //image

    Image backgroungImg;
    Image birdimg;
    Image topPipeImg;
    Image bottomPipeImg;

    //bird

    int birdX=boardWidth/8;
    int birdY=boardHeight/2;
    int birdWidth=34;
    int birdHeight=24;
    int yVelocity=0;
    int gravity=1;

    class Bird{
        int x=birdX;
        int y=birdY;
        int width=birdWidth;
        int height=birdHeight;
        Image img;
        Bird(Image img){
            this.img=img;
        }
    }
    //pipes
    int pipeX=boardWidth;
    int pipeY=0;
    int pipeWidth=64;//scaled by 1/6
    int pipeHeight=412;
    class Pipe{
        int x=pipeX;
        int y=pipeY;
        int height=pipeHeight;
        int width=pipeWidth;
        Image img;
        boolean passed=false;
        Pipe(Image img){
            this.img=img;
        }
    }

    //game logic
    Bird bird;
    int velocityX=-4;
    int velocityY=0;
     ArrayList<Pipe> pipes;
     Random r=new Random();

    Timer gameLoop;
    Timer placePipesTimer;
    boolean gameOver=false;
    double score=0;

    FlappyTom(){
        setPreferredSize(new Dimension(boardWidth,boardHeight));
        setFocusable(true);
        addKeyListener(this);
        setBackground(Color.blue);

        //load images
        backgroungImg = new ImageIcon(getClass().getResource("./backgroundImg.png")).getImage();
        birdimg=new ImageIcon(getClass().getResource("./bird.png")).getImage();
        topPipeImg=new ImageIcon(getClass().getResource("./topPipe.png")).getImage();
        bottomPipeImg=new ImageIcon(getClass().getResource("./bottomPipe.png")).getImage();

        // bird
        bird=new Bird(birdimg);
        pipes=new ArrayList<>();

        //place pipe timers
        placePipesTimer=new Timer(1500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                placePipes();
            }
        });
        placePipesTimer.start();

        //game timer
        gameLoop=new Timer(1000/60,this);//1000/60=16.6
        gameLoop.start();

    }
    public void placePipes(){
        int randomPipeY=(int)(pipeY-pipeHeight/4-Math.random()*(pipeHeight/2));
        int openingSpace=boardHeight/4;

        Pipe topPipe=new Pipe(topPipeImg);
        topPipe.y=randomPipeY;
        pipes.add(topPipe);

        Pipe bottomPipe=new Pipe(bottomPipeImg);
        bottomPipe.y= topPipe.y+pipeHeight+openingSpace;
        pipes.add(bottomPipe);
    }
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        draw(g);
    }

    private void draw(Graphics g) {
     //   System.out.println("draw");
        //background
        g.drawImage(backgroungImg,0,0,boardWidth,boardHeight,null);//starting position: top left corner , size=frame

        //bird
        g.drawImage(bird.img,bird.x,bird.y,bird.width,bird.height,null);

        for(int i=0;i<pipes.size();i++){
            Pipe pipe=pipes.get(i);
            g.drawImage(pipe.img,pipe.x,pipe.y,pipe.width,pipe.height,null);
        }
        g.setColor(Color.WHITE);
        g.setFont(new Font("Ariel",Font.PLAIN,32));
        if(gameOver){
            g.drawString("Game Over "+String.valueOf((int)score),10,35);
        }
        else{
            g.drawString(String.valueOf((int) score),10,35);
        }
    }
    public void move(){
        //bird
        yVelocity+=gravity;
        bird.y+=yVelocity;
        bird.y=Math.max(bird.y,0);

        //pipes
        for(int i=0;i<pipes.size();i++){
            Pipe pipe=pipes.get(i);
            pipe.x+=velocityX;

            if(!pipe.passed && bird.x>pipe.x+pipe.width){
                pipe.passed=true;
                score=0.5+score;//because there are two pipes
            }

            if(collision(bird,pipe)){
                gameOver=true;
            }
        }
        if(bird.y>boardHeight){
            gameOver=true;
        }

    }
    public void actionPerformed(ActionEvent e){
        move();
        repaint();
        if(gameOver){
            placePipesTimer.stop();
            gameLoop.stop();
        }
    }
    public boolean collision(Bird a , Pipe b){
        return a.x<b.x+b.width && a.x+a.width>b.x && a.y<b.y+b.height && a.y +a.height>b.y;
    }
    public void keyPressed(KeyEvent e){
        if(e.getKeyCode()==KeyEvent.VK_SPACE){
            yVelocity=-9;
        }
    }
    public void keyReleased(KeyEvent e){}
    public void keyTyped(KeyEvent e){}
}

public class FlappyBird {
    public static void main(String[] args) {
        int boardWidth=360;
        int boardHeight=640;

        JFrame frame=new JFrame();
        frame.setVisible(true);
        frame.setTitle("Flappy Bird");
        frame.setSize(boardWidth,boardHeight);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        FlappyTom tom=new FlappyTom();
        frame.add(tom);
        frame.pack();
        tom.requestFocus();
        frame.setVisible(true);


    }
}
