package Games.Pong;
import javax.swing.*;
import java.awt.*;
public class GameFrame extends JFrame {
    GamePanel panel;

    GameFrame() {
        panel =new GamePanel();
        this.add(panel);
        this.setTitle("PONG GAME");
        this.setResizable(false);
        this.setBackground(Color.black);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.pack();
        this.setVisible(true);
        this.setLocationRelativeTo(null);

    }
}

public class GamePanel extends JPanel implements Runnable{
    static final int WIDTH=1000;
    static final int HEIGHT=(int)(WIDTH*(0.555));
    static final Dimension SIZE=new Dimension(WIDTH,HEIGHT);
    static final int BALL_DIAMETER=20;
    static final int PADDLE_WIDTH=25;
    static final int PADDLE_HEIGHT=100;
    Thread game;
    Image image;
    Graphics graphics;
    Random random;
    Paddle paddle1;
    Paddle paddle2;
    Ball ball;
    Score score;
    GamePanel(){
        newPaddle();
        newBall();
        score=new Score(WIDTH,HEIGHT);
        this.setFocusable(true);
        this.addKeyListener(new AL());
        this.setPreferredSize(SIZE);

        game=new Thread(this);
        game.start();


    }
    public void newBall(){
       random=new Random();
        ball=new Ball((WIDTH/2)-(BALL_DIAMETER/2),random.nextInt((HEIGHT-BALL_DIAMETER)),BALL_DIAMETER,BALL_DIAMETER);

    }
    public void newPaddle(){
        paddle1=new Paddle(0,(HEIGHT/2)-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,1);
        paddle2=new Paddle(WIDTH-PADDLE_WIDTH,(HEIGHT/2)-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,2);


    }
    public void paint(Graphics g){
        image=createImage(getWidth(),getHeight());
        graphics=image.getGraphics();
        draw(graphics);
        g.drawImage(image,0,0,this);

    }
    public void draw(Graphics g){
        paddle1.draw(g);
        paddle2.draw(g);
        ball.draw(g);
        score.draw(g);
    }
    public void move(){
        //for smooth movement of paddles
        paddle1.move();
        paddle2.move();
        ball.move();

    }
    public void checkCollisions(){
        //bounce the ball of top and bottom of window edges
        if(ball.y<=0){
            ball.setYDirection(-ball.yVelocity);
        }
        if(ball.y>=(HEIGHT-BALL_DIAMETER)){
            ball.setYDirection(-ball.yVelocity);
        }
        //collision between ball and paddle
        if(ball.intersects(paddle1)){
            ball.xVelocity=Math.abs(ball.xVelocity);
            ball.xVelocity++;//optional for increasing difficulty

            if(ball.yVelocity>0){
                ball.yVelocity++;//optional for increasing difficulty
            }
            else{
                ball.yVelocity--;
            }
            ball.setXDirection(ball.xVelocity);
            ball.setYDirection(ball.yVelocity);
        }
        if(ball.intersects(paddle2)){
            ball.xVelocity=Math.abs(ball.xVelocity);
            ball.xVelocity++;//optional for increasing difficulty

            if(ball.yVelocity>0){
                ball.yVelocity++;//optional for increasing difficulty
            }
            else{
                ball.yVelocity--;
            }
            ball.setXDirection(-ball.xVelocity);
            ball.setYDirection(ball.yVelocity);
        }
        //Check whether paddles touch window edges
        if(paddle1.y<=0){
            paddle1.y=0;
        }
        if(paddle1.y>=(HEIGHT-PADDLE_HEIGHT)){
            paddle1.y=HEIGHT-PADDLE_HEIGHT;
        }
        if(paddle2.y<=0){
            paddle2.y=0;
        }
        if(paddle2.y>=(HEIGHT-PADDLE_HEIGHT)){
            paddle2.y=HEIGHT-PADDLE_HEIGHT;
        }
        //give player1 point and create new paddle and ball
        if(ball.x<=0){
            score.player2++;
            newPaddle();
            newBall();
            System.out.println("Player 2: "+score.player2);
        }
        if(ball.x>=(WIDTH-BALL_DIAMETER)){
            score.player1++;
            newPaddle();
            newBall();
            System.out.println("Player 1: "+score.player1);
        }


    }
    public void run(){
        //basic game loop

        long lastTime=System.nanoTime();
        double amountOfTicks=60.0;
        double ns=1000000000/amountOfTicks;
        double delta=0;
        while(true){
            long now=System.nanoTime();
            delta+=(now-lastTime)/ns;
            lastTime=now;
            if(delta>=1){
                move();
                checkCollisions();
                repaint();
                delta--;

            }
        }

    }
    public class AL extends KeyAdapter{
        public void keyPressed(KeyEvent e){
            paddle1.keyPressed(e);
            paddle2.keyPressed(e);

        }
        public void keyReleased(KeyEvent e){
            paddle1.keyReleased(e);
            paddle2.keyReleased(e);

        }

    }
}

public class Main {
    public static void main(String[] args) {
        new GameFrame();
    }
}
