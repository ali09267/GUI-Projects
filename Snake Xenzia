package Games;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;
class GameFrame extends JFrame{
    GameFrame(){
        this.add(new GamePanel());
        this.setTitle("Snake Game");
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);//user cannot change the size of the window
        this.pack();//ensures that window is large enough that it accommodates all its components
        this.setVisible(true);
        this.setLocationRelativeTo(null);//the frame is centered to your screen
    }
}
class GamePanel extends JPanel implements ActionListener{
    static final int SCREEN_WIDTH=600;//width of the screen
    static final int SCREEN_HEIGHT=600;//height of the screen
    static final int UNIT_SIZE=18;//size of each unit in the game
    static final int GAME_UNITS=(SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SIZE;//total no: of units in the game (total no: of possible positions)
    static final int DELAY=95;//speed of the game(more delay results in slower game)
    final int[] x =new int[GAME_UNITS];//x coordinate of snake body parts
    final int[] y =new int[GAME_UNITS];//y coordinate of snake body part (which cannot be greater than screen)
    int bodyParts=6;//initial no: of snake body parts
    int applesEaten;//apples eaten by snake
    int appleX;//x coordinate of apple
    int appleY;//y coordinate of apple
    char direction='R';//initial direction('R' indicates right)
    boolean running=false;//whether the game is running
    Timer t;
    Random r;//for indicating different positions of apple

    GamePanel(){
        r=new Random();//random positions of apple
        this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
        this.setBackground(Color.black);//set background color of panel to black
        this.setFocusable(true);//make panel focusable so it can receive keyboard input
        this.addKeyListener(new MyKeyAdapter());//adds a key listener to handle or respond keyboard inputs

        startGame();//to start the game
    }
    void startGame(){
       newApple();//calls method to place apple on random position
       running=true;//ensure that the game is active
       t=new Timer(DELAY,this);//generates an action after every delay (95 milliseconds here).
        // The 'this' keyword indicates that the GamePanel class itself will handle the timer's action events (hence, it implements ActionListener). //
        t.start();//start the timer or game loop
    }
    public void paintComponent(Graphics g){//used for custom rendering and override it to provide your custom drawing logic
        super.paintComponent(g);//this calls the paintComponents() method of the super class JPanel ensuring that panel is properly rendered
        draw(g);
    }
   public void draw(Graphics g){
        if(running){
            // Draws grid on the screen
        for(int i=0;i<SCREEN_HEIGHT/UNIT_SIZE;i++){
            g.drawLine(i*UNIT_SIZE,0,i*UNIT_SIZE,SCREEN_HEIGHT);
            g.drawLine(0,i*UNIT_SIZE,SCREEN_WIDTH,i*UNIT_SIZE);
        }
        g.setColor(Color.RED);//set the color to red
        g.fillOval(appleX,appleY,UNIT_SIZE,UNIT_SIZE);//draws an oval (apple) with the diameter of unit size
        //Draws snake
        for(int i=0;i<bodyParts;i++){
            if(i==0){
                g.setColor(Color.GREEN);
                g.fillRect(x[i],y[i],UNIT_SIZE,UNIT_SIZE);
            }
            else{
                g.setColor(new Color(45,180,0));
                g.fillRect(x[i],y[i],UNIT_SIZE,UNIT_SIZE);
            }
        }//Draws score
            g.setColor(Color.red);
            g.setFont(new Font(" ",Font.BOLD,40));
            FontMetrics metrics=getFontMetrics(g.getFont());
            g.drawString("Score: "+applesEaten,(SCREEN_WIDTH-metrics.stringWidth("Score: "+applesEaten))/2,g.getFont().getSize());}
        else{//if running is false calls game over method
            gameOver(g);
        }

    }
   public void newApple(){
        appleX=r.nextInt(SCREEN_WIDTH/UNIT_SIZE)*UNIT_SIZE;
        appleY=r.nextInt(SCREEN_HEIGHT/UNIT_SIZE)*UNIT_SIZE;

    }
    public void move(){
        for(int i=bodyParts;i>0;i--){
            x[i]=x[i-1];
            y[i]=y[i-1];
        }

        switch(direction){
            case 'U':
                y[0]=y[0]-UNIT_SIZE;
                break;

            case 'D':
                y[0]=y[0]+UNIT_SIZE;
                break;

            case 'L':
                x[0]=x[0]-UNIT_SIZE;
                break;

            case 'R':
                x[0]=x[0]+UNIT_SIZE;
                break;
        }
    }
    void checkApple(){
        if((x[0]==appleX)&&(y[0]==appleY)){
            bodyParts++;
            applesEaten++;
            newApple();
        }
    }
    void checkCollisions(){
        //checks head collides with body
        for(int i=bodyParts;i>0;i--){
            if ((x[0] == x[i]) && (y[0] == y[i])) {
                running = false;
                break;
            }
        }
        //check head touches left corner
        if(x[0]<0){
            running=false;
        }
        //right corner
        if(x[0]>SCREEN_WIDTH){
            running=false;
        }
        //bottom corner
        if(y[0]>SCREEN_HEIGHT){
            running=false;
        }
        //top corner
        if(y[0]<0){
            running=false;
        }
        if(!running) {
            t.stop();
        }
    }
    void gameOver(Graphics g){
        //score
        g.setColor(Color.red);
        g.setFont(new Font(" ",Font.BOLD,40));
        FontMetrics metrics=getFontMetrics(g.getFont());//Fonts metrics provides the information of direction and properties of character in specific font
        g.drawString("Score: "+applesEaten,(SCREEN_WIDTH-metrics.stringWidth("Score: "+applesEaten))/2,g.getFont().getSize());//centered the font horizontally
        //game over text
        g.setColor(Color.red);
        g.setFont(new Font(" ",Font.BOLD,75));
        FontMetrics metrics2=getFontMetrics(g.getFont());
        g.drawString("Game Over",(SCREEN_WIDTH-metrics2.stringWidth("Game Over"))/2,SCREEN_HEIGHT/2);
    }
    public void actionPerformed(ActionEvent e){
        if(running){
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }
    public class MyKeyAdapter extends KeyAdapter{
        public void keyPressed(KeyEvent e){
            switch(e.getKeyCode()){
                case KeyEvent.VK_LEFT:
                    if(direction !='R'){
                        direction='L';
                    }
                    break;
                case KeyEvent.VK_RIGHT:
                    if(direction !='L'){
                        direction='R';
                    }
                    break;
                case KeyEvent.VK_UP:
                    if(direction !='D'){
                        direction='U';
                    }
                    break;
                case KeyEvent.VK_DOWN:
                    if(direction !='U'){
                        direction='D';
                    }
                    break;
            }
        }
    }
}
public class Snake_Game{
    public static void main(String[] args) {
        new GameFrame();
    }
}
